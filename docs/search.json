[
  {
    "objectID": "syllabus.html#class-meetings",
    "href": "syllabus.html#class-meetings",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Class Meetings",
    "text": "Class Meetings\n\n\n\nMeeting\nLocation\nTime\n\n\n\n\nLecture\nLSN 111\nMon & Wed 3:30 - 4:45pm"
  },
  {
    "objectID": "syllabus.html#teaching-team",
    "href": "syllabus.html#teaching-team",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\nName\nOffice hours\nLocation\n\n\n\n\nSergio Rey\nThu 3:30 - 4:30pm (by appointment)\nPSFA 361G\n\n\nJin Huang\nFri 10:30am\nPSFA 361F"
  },
  {
    "objectID": "syllabus.html#introduction",
    "href": "syllabus.html#introduction",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Introduction",
    "text": "Introduction\nWelcome to 385: Spatial Data Analysis!\nThe purpose of this course is to introduce you to methods of spatial data analysis. The focus is on both the conceptual and applied aspects of spatial statistical methods. We will place particular emphasis on the computational aspects of Exploratory Spatial Data Analysis (ESDA) methods for diﬀerent types of spatial data including point processes, lattice data, geostatistical data, network data, and spatial interaction. Throughout the course you will gain valuable hands-on experience with several specialized software packages for spatial data analysis. The overriding goal of the course is for you to acquire familiarity with the fundamental methodological and operational issues in the statistical analysis of geographic information and the ability to extend these methods in your own research.\nThe course takes an explicitly computational thinking approach to its pedagogy. Students are introduced to computational concepts and tools that are increasingly important to research that engages with geospatial data. By adopting these tools, students acquire a deeper engagement with, and mastery of, the substantive concepts. Put differently, students will learn to code. But this is a means to the end goal: students will code to learn spatial data analysis.\nIn the scope of a 15-week semester course we can only introduce a handful of the key concepts and methods relevant to the field of spatial data analysis. As such, the course is not intended as an exhaustive treatment. Instead, the goal is that students will acquire an understanding of the more common and useful methods and practices, and use the course as an entry point for further engagement with the field."
  },
  {
    "objectID": "syllabus.html#prerequisites",
    "href": "syllabus.html#prerequisites",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nGEOG 101 or GEOG 102\nSTAT 250 or comparable course in statistics.\n\nAll students are required to complete the prerequisite assessment quiz before 2023-08-23 3:00pm."
  },
  {
    "objectID": "syllabus.html#computational-learning",
    "href": "syllabus.html#computational-learning",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Computational Learning",
    "text": "Computational Learning\nWe will be using open source geospatial software throughout the course together with Jupyter Notebooks, and Python as our scripting language.\nAll software for the course will be made available through JupyterHub a web-based framework. Students wishing to install these materials on their own machines will be given instructions to do so, but this is not required."
  },
  {
    "objectID": "syllabus.html#readings",
    "href": "syllabus.html#readings",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Readings",
    "text": "Readings\nAll required readings are available through the links listed below. Assigned readings should be completed before the date listed in the schedule (see below). Readings are a critical part of the discussions we will hold in class, and therefore being prepared for class means having completed the readings and thought about the content. It will be difficult to do well in this course without having completed the readings.\n\n\n\nAbbrevation\nSource\n\n\n\n\nGDA\nTenkanen, H., V. Heikinheimo, D. Whipp (2023) Python for Geographic Data Analysis. CRC Press.\n\n\nGDS\nRey, S.J., D. Arribas-Bel, L.J. Wolf (2023) Geographic Data Science with Python. CRC Press."
  },
  {
    "objectID": "syllabus.html#schedule-planned",
    "href": "syllabus.html#schedule-planned",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Schedule (Planned)",
    "text": "Schedule (Planned)\n\n\n\n\n\n\n\n\n\n\nWeek\nDates\nTopic\nReading\nDue\n\n\n\n\n1\nAug-21\nCourse Introduction\n\n\n\n\n\nAug-23\nJupyter Hub\nGDA 1 GDS 2\n\n\n\n2\nAug-28\nPython: Programming Concepts\nGDA 2\nQuiz 1\n\n\n\nAug-30\nPython: Scripting\nGDA 2\n\n\n\n3\nSep-04\nLabor Day Holiday\n\n\n\n\n\nSep-06\nPython: Data Analysis/Visualization\nGDA 3,4\n\n\n\n4\nSep-11\nPython: Geographic Data\nGDA 5\nQuiz 2\n\n\n\nSep-13\nGeopandas and PySAL\nGDA 6\nExercise 1\n\n\n5\nSep-18\nSpatial Data Overview\nGDS 3\nQuiz 3\n\n\n\nSep-20\nGeoVisualization\nGDS 5\n\n\n\n6\nSep-25\nSpatial Weights\nGDS 4\nQuiz 4\n\n\n\nSep-27\nSpatial Dependence\nGDS 6\n\n\n\n7\nOct-02\nGlobal Autocorrelation\nGDS 6\nQuiz 5\n\n\n\nOct-04\nGlobal Autocorrelation Tests\nGDS 6\n\n\n\n8\nOct-09\nLocal Autocorrelation\nGDS 7\nQuiz 6\n\n\n\nOct-11\nLocal Autocorrelation Tests\nGDS 7\nExercise 2\n\n\n9\nOct-16\nPoint Pattern Data\nGDS 8\nQuiz 7\n\n\n\nOct-18\nCentrography\nGDS 8\n\n\n\n10\nOct-23\nPoint Processes\nGDS 8\nQuiz 8\n\n\n\nOct-25\nQuadrat Statistics\nGDS 8\n\n\n\n11\nOct-30\nNearest Neighbor Statistics\nGDS 8\nQuiz 9\n\n\n\nNov-01\nDistance Based Statistics\nGDS 8\n\n\n\n12\nNov-06\nGeostatistical Data\nTBA\nQuiz 10\n\n\n\nNov-08\nSpatial Interpolation\nTBA\nExercise 3\n\n\n13\nNov-13\nKriging\nTBA\nQuiz 11\n\n\n\nNov-15\nNetwork Data\nTBA\n\n\n\n14\nNov-20\nSpatial Interaction Data\nTBA\nQuiz 12\n\n\n\nNov-22\nGravity Models\nTBA\n\n\n\n15\nNov-27\nMeasuring Spatial Disparities\nTBA\nQuiz 13\n\n\n\nNov-29\nSpatial Segregation\nTBA\n\n\n\n16\nDec-04\nChange of Support Problems\nTBA\nQuiz 14\n\n\n\nDec-06\nNext Steps in SDA\n\nExercise 4\n\n\n17\nDec-11\nFinal Review\n\nQuiz 15\n\n\n18\nDec-18\nFinal Exam (13:00-15:00)"
  },
  {
    "objectID": "syllabus.html#grading",
    "href": "syllabus.html#grading",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Grading",
    "text": "Grading\nGEOG385 uses specification grading in evaluating student work and in determining your final course grade. Your course grade will be based on the quality and quantity of the work that you submit that is evaluated to be of an acceptable level of quality. The acceptable level of quality demonstrates competency in the concepts and methods covered in the course.\nThere is a two-step process for determination of your final course grade at the end of the quarter:\n\nUsing your quizzes and exercises, your base grade is determined.\nUsing your final exam results, determine if your base grade includes a \"plus\", \"minus\", or level drop to form the course grade.\n\nFor Step 1, the base grade is determined using the following specification:\n\n\n\nLevel\nHurdles\n\n\n\n\nA\nPass at least 13 of 15 quizzes and earn \"Demonstrates Competency\" on 4 of 4 exercises,\n\n\nB\nPass at least 11 of 15 quizzes and earn \"Demonstrates Competency\" on 3 of 4 exercises\n\n\nC\nPass at least 9 of 15 quizzes and earn \"Demonstrates Competency\" on 2 of 4 exercises\n\n\nD\nPass at least 7 of 15 quizzes and earn \"Demonstrates Competency\" on 1 of 4 exercises\n\n\nF\nFail to clear D-level hurdles\n\n\n\nFor Step 2, your final course grade is determined as follows:\n\nIf you earn at least 85% on the final exam, you will obtain a “+” for your grade. So a B base grade would become a B+ course grade, and so on (Note: SDSU does not record A+ grades).\nIf you score between 70-85% on the final exam, your base grade becomes your course grade.\nIf you score between 50% and 69% on the final exam, you will obtain a “-” for your grade. So an A base grade becomes an A- course grade, a B base grade becomes a B- course grade, and so on.\nIf you score less than 50% on the final exam, your course grade will drop one level: An A base grade becomes a final B course grade."
  },
  {
    "objectID": "syllabus.html#quizzes",
    "href": "syllabus.html#quizzes",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Quizzes",
    "text": "Quizzes\nQuizzes are graded on a pass/fail basis. Starting in week two, there will be a quiz due before a session that pertains to the background reading that is required before our work in class."
  },
  {
    "objectID": "syllabus.html#exercises",
    "href": "syllabus.html#exercises",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Exercises",
    "text": "Exercises\nFour exercises will be introduced in class and are to be completed outside of class meetings.\nEach exercise is graded using a CRN rubric that classifies work with marks of C (\"Demonstrates Competence\"), R (\"Needs Revision\"), or N (\"Not assessable\"):\nOf each exercise the following questions will be asked: Does the work demonstrate that the student understands the concepts? Does the work demonstrate competence and meet the expectations outlined in the exercise?\nIf the answer is \"yes\" to both of the questions, a student passes the hurdle for that exercise.\nIf the initial submission does not clear the hurdle, then a second question is asked: Is there evidence of partial understanding of the concepts? If the answer to this question is \"Yes\" the student can exchange one token to attempt a revision of their work. If the answer is \"No\", the student does not clear the hurdle for this exercise and will not have the opportunity to revise their work."
  },
  {
    "objectID": "syllabus.html#final-exam",
    "href": "syllabus.html#final-exam",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Final Exam",
    "text": "Final Exam\nA closed book, closed note, timed final exam will be given on December 18 (13:00-15:00). The exam will be based on a blend of previous quiz questions and additional questions that pertain to material covered in class."
  },
  {
    "objectID": "syllabus.html#tokens",
    "href": "syllabus.html#tokens",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Tokens",
    "text": "Tokens\nEach student is provided with three tokens at the beginning of the semester.\nUsing Tokens\n\nOne token can be used for a one-day extension for an exercise.\nOne token can be used to revise an exercise that was submitted on-time but evaluated as \"Needing Revision\".\nTwo tokens can be used to request a make-up date for the final exam. (Requests required by 2023-11-18 17:00.)\n\nRemaining Tokens\nEach token that remains unused after 2023-12-18 will be counted as a passed quiz. Tokens cannot be exchanged with other students."
  },
  {
    "objectID": "syllabus.html#policies",
    "href": "syllabus.html#policies",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "Policies",
    "text": "Policies\n\nAccommodations\nIf you are a student with a disability and are in need of accommodations for this class, please contact Student Ability Success Center at (619) 594-6473 as soon as possible. Please know accommodations are not retroactive, and I cannot provide accommodations based upon disability until I have received an accommodation letter from Student Ability Success Center.\n\n\nPrivacy and Intellectual Property\nStudent Privacy and Intellectual Property: The Family Educational Rights and Privacy Act (FERPA) mandates the protection of student information, including contact information, grades, and graded assignments. I will use Canvas to communicate with you, and I will not post grades or leave graded assignments in public places. Students will be notified at the time of an assignment if copies of student work will be retained beyond the end of the semester or used as examples for future students or the wider public. Students maintain intellectual property rights to work products they create as part of this course unless they are formally notified otherwise.\n\n\nAcademic Integrity\nThe SDSU student academic integrity policy lists violations in detail. These violations fall into eight broad areas that include but are not limited to: cheating, fabrication, plagiarism, facilitating academic misconduct, unauthorized collaboration, interference or sabotage, non-compliance with research regulations and retaliation. For more information about the SDSU student academic integrity policy, please see the following: https://sacd.sdsu.edu/student-rights/academic-dishonesty.\n\n\nCode of Conduct\nAs course instructor, I am dedicated to providing a harassment-free learning experience for all students, regardless of gender, sexual orientation, disability, physical appearance, body size, race, religion, or choice of operating system. All course participants are expected to show respect and courtesy to other students throughout the semester. As a learning community we do not tolerate harassment of participants in any form.\n\nAll communication should be appropriate for a professional audience including people of many different backgrounds. Sexual language and imagery are not appropriate in this course.\nBe kind to others. Do not insult or put down other students. Behave professionally. Remember that harassment and sexist, racist, or exclusionary jokes are not appropriate for this course.\nStudents violating these rules may be asked to leave the course, and their violations will be reported to the SDSU administration.\n\nThis code of conduct is an adaptation of the SciPy 2018 Code of Conduct."
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "Geography 385 Spatial Data Analysis",
    "section": "",
    "text": "Week 01\n\n08-21 Course Introduction\n08-23 Jupyter Introduction (ipynb)\n\nWeek 02\n\n08-28 Python Introduction (ipynb)\n08-30 Functions and Scripts (ipynb) (temp_converter.py)\n\nWeek 03\n\n09-06 Python Introduction to Data Analysis (ipynb)"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#introduction",
    "href": "lectures/week-01/01-introduction.html#introduction",
    "title": "Course Introduction",
    "section": "Introduction",
    "text": "Introduction\n\nThis course introduces the fundamental concepts of spatial data analysis. Key fundamentals include spatial sampling, descriptive statistics for areal data, inferential statistics, use of maps in data analysis."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#approach",
    "href": "lectures/week-01/01-introduction.html#approach",
    "title": "Course Introduction",
    "section": "Approach",
    "text": "Approach\n\nThe course takes an explicitly computational thinking approach to its pedagogy. Students are introduced to computational concepts and tools that are increasingly important to research that engages with geospatial data. By adopting these tools, students acquire a deeper engagement with, and mastery of, the substantive concepts."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#scope",
    "href": "lectures/week-01/01-introduction.html#scope",
    "title": "Course Introduction",
    "section": "Scope",
    "text": "Scope\n\nIn the scope of a 15-week semester course we can only introduce a handful of the key concepts and methods relevant to the field of spatial data analysis. As such, the course is not intended as an exhaustive treatment. Instead, the goal is that students will acquire an understanding of the more common and useful methods and practices, and use the course as an entry point for further engagement with the field."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#prerequisites",
    "href": "lectures/week-01/01-introduction.html#prerequisites",
    "title": "Course Introduction",
    "section": "Prerequisites",
    "text": "Prerequisites"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#schedule-reading-and-content",
    "href": "lectures/week-01/01-introduction.html#schedule-reading-and-content",
    "title": "Course Introduction",
    "section": "Schedule, Reading, and Content",
    "text": "Schedule, Reading, and Content\nAll required readings are available through the links listed below. Assigned readings should be completed before the date listed in the schedule (see below). Readings are a critical part of the discussions we will hold in class, and therefore coming into class prepared means having completed the readings and thought about the content. It will be difficult to do well in this course without having completed the readings."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#readings",
    "href": "lectures/week-01/01-introduction.html#readings",
    "title": "Course Introduction",
    "section": "Readings",
    "text": "Readings\n\n\n\nAbbrevation\nSource\n\n\n\n\nGDA\nTenkanen, H., V. Heikinheimo, D. Whipp (2023) Python for Geographic Data Analysis. CRC Press.\n\n\nGDS\nRey, S.J., D. Arribas-Bel, L.J. Wolf (2023) Geographic Data Science with Python. CRC Press."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#schedule-planned",
    "href": "lectures/week-01/01-introduction.html#schedule-planned",
    "title": "Course Introduction",
    "section": "Schedule (Planned)",
    "text": "Schedule (Planned)"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#schedule-planned-1",
    "href": "lectures/week-01/01-introduction.html#schedule-planned-1",
    "title": "Course Introduction",
    "section": "Schedule (Planned)",
    "text": "Schedule (Planned)"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#grading",
    "href": "lectures/week-01/01-introduction.html#grading",
    "title": "Course Introduction",
    "section": "Grading",
    "text": "Grading\nGEOG385 uses specification grading in evaluating student work and in determining your final course grade. Your course grade will be based on the quality and quantity of the work that you submit that is evaluated to be of an acceptable level of quality. The acceptable level of quality demonstrates competency in the concepts and methods covered in the course."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#specification-grading",
    "href": "lectures/week-01/01-introduction.html#specification-grading",
    "title": "Course Introduction",
    "section": "Specification Grading",
    "text": "Specification Grading\nThere is a two-step process for determination of your final course grade at the end of the quarter:\n\nUsing your quizzes, and exercises, your base grade is determined.\nUsing your final exam results, determine if your base grade includes a \"plus\", \"minus\", or level drop to form the course grade."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#base-grade",
    "href": "lectures/week-01/01-introduction.html#base-grade",
    "title": "Course Introduction",
    "section": "Base Grade",
    "text": "Base Grade\n\n\n\nLevel\nHurdles\n\n\n\n\nA\nPass at least 13 of 15 quizzes and earn \"Demonstrates Competency\" on 4 of 4 exercises,\n\n\nB\nPass at least 11 of 15 quizzes and earn \"Demonstrates Competency\" on 3 of 4 exercises\n\n\nC\nPass at least 9 of 15 quizzes and earn \"Demonstrates Competency\" on 2 of 4 exercises\n\n\nD\nPass at least 7 of 15 quizzes and earn \"Demonstrates Competency\" on 1 of 4 exercises\n\n\nF\nFail to clear D-level hurdles"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#final-grade",
    "href": "lectures/week-01/01-introduction.html#final-grade",
    "title": "Course Introduction",
    "section": "Final Grade",
    "text": "Final Grade\n\nIf you earn at least 85% on the final exam, you will obtain a “+” for your grade. So a B base grade would become a B+ course grade, and so on (Note: SDSU does not record A+ grades).\nIf you score between 70-85% on the final exam, your base grade becomes your course grade.\nIf you score between 50% and 69% on the final exam, you will obtain a “-” for your grade. So an A base grade becomes an A- course grade, a B base grade becomes a B- course grade, and so on.\nIf you score less than 50% on the final exam, your course grade will drop one level: An A base grade becomes a final B course grade."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#quizzes",
    "href": "lectures/week-01/01-introduction.html#quizzes",
    "title": "Course Introduction",
    "section": "Quizzes",
    "text": "Quizzes\nQuizzes are graded on a pass/fail basis. Starting in week two, there will be a quiz due before a session that pertains to the background reading that is required before our work in class."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#exercises",
    "href": "lectures/week-01/01-introduction.html#exercises",
    "title": "Course Introduction",
    "section": "Exercises",
    "text": "Exercises\nFour exercises will be introduced in class and are to be completed outside of class meetings.\nEach exercise is graded using a CRN rubric that classifies work with marks of C (\"Demonstrates Competence\"), R (\"Needs Revision\"), or N (\"Not assessable\"):"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#exercises-1",
    "href": "lectures/week-01/01-introduction.html#exercises-1",
    "title": "Course Introduction",
    "section": "Exercises",
    "text": "Exercises\nOf each exercise the following questions will be asked: Does the work demonstrate that the student understands the concepts? Does the work demonstrate competence and meet the expectations outlined in the exercise?\nIf the answer is \"yes\" to both of the questions, a student passes the hurdle for that exercise."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#exercises-2",
    "href": "lectures/week-01/01-introduction.html#exercises-2",
    "title": "Course Introduction",
    "section": "Exercises",
    "text": "Exercises\nIf the initial submission does not clear the hurdle, then a second question is asked: Is there evidence of partial understanding of the concepts? If the answer to this question is \"Yes\" the student can exchange one token to attempt a revision of their work. If the answer is \"No\", the student does not clear the hurdle for this exercise and will not have the opportunity to revise their work."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#final-exam",
    "href": "lectures/week-01/01-introduction.html#final-exam",
    "title": "Course Introduction",
    "section": "Final Exam",
    "text": "Final Exam\nA closed book, closed note, timed final exam will be given on December 18 (13:00-15:00). The exam will be based on a blend of previous quiz questions and additional questions that pertain to material covered in class."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#tokens",
    "href": "lectures/week-01/01-introduction.html#tokens",
    "title": "Course Introduction",
    "section": "Tokens",
    "text": "Tokens\nEach student is provided with three tokens at the beginning of the semester."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#using-tokens",
    "href": "lectures/week-01/01-introduction.html#using-tokens",
    "title": "Course Introduction",
    "section": "Using Tokens",
    "text": "Using Tokens\n\nOne token can be used for a one-day extension for an exercise.\nOne token can be used to revise an exercise that was submitted on-time but evaluated as \"Needing Revision\".\nTwo tokens can be used to request a make-up date for the final exam."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#remaining-tokens",
    "href": "lectures/week-01/01-introduction.html#remaining-tokens",
    "title": "Course Introduction",
    "section": "Remaining Tokens",
    "text": "Remaining Tokens\nEach token that remains unused after 2023-12-18 will be counted as a passed quiz. Tokens cannot be exchanged with other students."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#administration",
    "href": "lectures/week-01/01-introduction.html#administration",
    "title": "Course Introduction",
    "section": "Administration",
    "text": "Administration"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#accommodations",
    "href": "lectures/week-01/01-introduction.html#accommodations",
    "title": "Course Introduction",
    "section": "Accommodations",
    "text": "Accommodations\nIf you are a student with a disability and are in need of accommodations for this class, please contact Student Ability Success Center at (619) 594-6473 as soon as possible. Please know accommodations are not retroactive, and I cannot provide accommodations based upon disability until I have received an accommodation letter from Student Ability Success Center."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#privacy-and-intellectual-property",
    "href": "lectures/week-01/01-introduction.html#privacy-and-intellectual-property",
    "title": "Course Introduction",
    "section": "Privacy and Intellectual Property",
    "text": "Privacy and Intellectual Property\nStudent Privacy and Intellectual Property: The Family Educational Rights and Privacy Act (FERPA) mandates the protection of student information, including contact information, grades, and graded assignments. I will use [Canvas / Blackboard] to communicate with you, and I will not post grades or leave graded assignments in public places. Students will be notified at the time of an assignment if copies of student work will be retained beyond the end of the semester or used as examples for future students or the wider public. Students maintain intellectual property rights to work products they create as part of this course unless they are formally notified otherwise."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#academic-integrity",
    "href": "lectures/week-01/01-introduction.html#academic-integrity",
    "title": "Course Introduction",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nThe SDSU student academic integrity policy lists violations in detail. These violations fall into eight broad areas that include but are not limited to: cheating, fabrication, plagiarism, facilitating academic misconduct, unauthorized collaboration, interference or sabotage, non-compliance with research regulations and retaliation. For more information about the SDSU student academic integrity policy, please see the following: http://www.sa.sdsu.edu/srr/index.html."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#code-of-conduct",
    "href": "lectures/week-01/01-introduction.html#code-of-conduct",
    "title": "Course Introduction",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nAs course instructor, I am dedicated to providing a harassment-free learning experience for all students, regardless of gender, sexual orientation, disability, physical appearance, body size, race, religion, or choice of operating system. All course participants are expected to show respect and courtesy to other students throughout the semester. As a learning community we do not tolerate harassment of participants in any form."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#code-of-conduct-1",
    "href": "lectures/week-01/01-introduction.html#code-of-conduct-1",
    "title": "Course Introduction",
    "section": "Code of Conduct",
    "text": "Code of Conduct\n\nAll communication should be appropriate for a professional audience including people of many different backgrounds. Sexual language and imagery are not appropriate in this course.\nBe kind to others. Do not insult or put down other students. Behave professionally. Remember that harassment and sexist, racist, or exclusionary jokes are not appropriate for this course.\nStudents violating these rules may be asked to leave the course, and their violations will be reported to the SDSU administration.\n\nThis code of conduct is an adaptation of the SciPy 2018 Code of Conduct."
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#computational-learning",
    "href": "lectures/week-01/01-introduction.html#computational-learning",
    "title": "Course Introduction",
    "section": "Computational Learning",
    "text": "Computational Learning\n\n\nShow me the code\nimport libpysal.examples\nimport geopandas \n\n# get path to built-in dataset for Mexico\npth = libpysal.examples.get_path(\"mexicojoin.shp\")\n# load the file with geopandas to create a GeoDataframe\ngdf = geopandas.read_file(pth)\n# call the plot method of the GeoDataFrame\ngdf.plot(edgecolor='white');"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#open-source",
    "href": "lectures/week-01/01-introduction.html#open-source",
    "title": "Course Introduction",
    "section": "Open Source",
    "text": "Open Source"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#server-or-laptop",
    "href": "lectures/week-01/01-introduction.html#server-or-laptop",
    "title": "Course Introduction",
    "section": "Server or Laptop",
    "text": "Server or Laptop\nYou can choose to either use an account on our course JupyterHub or install the packages on your own laptop.\nEither way, you will be using Jupyter Notebooks for all computation:"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#my-program",
    "href": "lectures/week-01/01-introduction.html#my-program",
    "title": "Course Introduction",
    "section": "My Program",
    "text": "My Program\n\n\n\nurl"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#why-am-i-here",
    "href": "lectures/week-01/01-introduction.html#why-am-i-here",
    "title": "Course Introduction",
    "section": "Why am I here",
    "text": "Why am I here"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#why-am-i-here-1",
    "href": "lectures/week-01/01-introduction.html#why-am-i-here-1",
    "title": "Course Introduction",
    "section": "Why am I here",
    "text": "Why am I here"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#trump-turned-this-place-into-a-ghost-town",
    "href": "lectures/week-01/01-introduction.html#trump-turned-this-place-into-a-ghost-town",
    "title": "Course Introduction",
    "section": "‘Trump turned this place into a ghost town’",
    "text": "‘Trump turned this place into a ghost town’"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#stockton-and-atlantic-city",
    "href": "lectures/week-01/01-introduction.html#stockton-and-atlantic-city",
    "title": "Course Introduction",
    "section": "Stockton and Atlantic City",
    "text": "Stockton and Atlantic City"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#stockton-and-atlantic-city-1",
    "href": "lectures/week-01/01-introduction.html#stockton-and-atlantic-city-1",
    "title": "Course Introduction",
    "section": "Stockton and Atlantic City",
    "text": "Stockton and Atlantic City\n\nSource"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#stockton",
    "href": "lectures/week-01/01-introduction.html#stockton",
    "title": "Course Introduction",
    "section": "Stockton",
    "text": "Stockton"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#stockton-1",
    "href": "lectures/week-01/01-introduction.html#stockton-1",
    "title": "Course Introduction",
    "section": "Stockton",
    "text": "Stockton"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#stockton-2",
    "href": "lectures/week-01/01-introduction.html#stockton-2",
    "title": "Course Introduction",
    "section": "Stockton",
    "text": "Stockton"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#stockton-3",
    "href": "lectures/week-01/01-introduction.html#stockton-3",
    "title": "Course Introduction",
    "section": "Stockton",
    "text": "Stockton"
  },
  {
    "objectID": "lectures/week-01/01-introduction.html#you",
    "href": "lectures/week-01/01-introduction.html#you",
    "title": "Course Introduction",
    "section": "You",
    "text": "You\nTake a few minutes and let us know a bit about yourself\n\nName\nProgram/Concentration\nWhy you are here"
  },
  {
    "objectID": "lectures/week-01/2023-08-23.html",
    "href": "lectures/week-01/2023-08-23.html",
    "title": "Geog385F23",
    "section": "",
    "text": "3 + 7\n\n10"
  },
  {
    "objectID": "lectures/week-01/2023-08-23.html#markdown",
    "href": "lectures/week-01/2023-08-23.html#markdown",
    "title": "Geog385F23",
    "section": "Markdown",
    "text": "Markdown\nThis is a markdown cell.\nSo what?\nWell we can do things like bold or italics.\nHow about bold and italics\n\nSubsection\nNow we are in a subsection.\n\n\nLists\nHere is stuff .\nWe can do unordered lists:\n\nfirst\nsecond\nthird\n\nOr numbered lists\n\nfirst\nsecond\nthird"
  },
  {
    "objectID": "lectures/week-01/2023-08-23.html#math",
    "href": "lectures/week-01/2023-08-23.html#math",
    "title": "Geog385F23",
    "section": "Math",
    "text": "Math\nThe formulae for the sample mean is:\n\\[\n\\bar{x} = 1/n \\sum_{i=1}^n x_i\n\\]"
  },
  {
    "objectID": "lectures/week-01/2023-08-23.html#markdown-1",
    "href": "lectures/week-01/2023-08-23.html#markdown-1",
    "title": "Geog385F23",
    "section": "Markdown",
    "text": "Markdown\nThis is a markdown cell.\nSo what?\nWell we can do things like bold or italics.\nHow about bold and italics\n\nSubsection\nNow we are in a subsection.\n\n\nLists\nHere is stuff .\nWe can do unordered lists:\n\nfirst\nsecond\nthird\n\nOr numbered lists\n\nfirst\nsecond\nthird"
  },
  {
    "objectID": "lectures/week-01/2023-08-23.html#math-1",
    "href": "lectures/week-01/2023-08-23.html#math-1",
    "title": "Geog385F23",
    "section": "Math",
    "text": "Math\nThe formulae for the sample mean is:\n\\[\n\\bar{x} = 1/n \\sum_{i=1}^n x_i\n\\]"
  },
  {
    "objectID": "lectures/week-01/2023-08-23.html#links",
    "href": "lectures/week-01/2023-08-23.html#links",
    "title": "Geog385F23",
    "section": "Links",
    "text": "Links\nThe big search engine in the sky is google"
  },
  {
    "objectID": "lectures/week-01/2023-08-23.html#markdown-2",
    "href": "lectures/week-01/2023-08-23.html#markdown-2",
    "title": "Geog385F23",
    "section": "Markdown",
    "text": "Markdown\nThis is a markdown cell.\nSo what?\nWell we can do things like bold or italics.\nHow about bold and italics\n\nSubsection\nNow we are in a subsection.\n\n\nLists\nHere is stuff .\nWe can do unordered lists:\n\nfirst\nsecond\nthird\n\nOr numbered lists\n\nfirst\nsecond\nthird"
  },
  {
    "objectID": "lectures/week-01/2023-08-23.html#math-2",
    "href": "lectures/week-01/2023-08-23.html#math-2",
    "title": "Geog385F23",
    "section": "Math",
    "text": "Math\n\n10 * 4\n\n40"
  },
  {
    "objectID": "lectures/0821/0821.html",
    "href": "lectures/0821/0821.html",
    "title": "Course Introduction",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()"
  },
  {
    "objectID": "lectures/week-02/2023-08-30-functions-scripts.html",
    "href": "lectures/week-02/2023-08-30-functions-scripts.html",
    "title": "Geog385F23",
    "section": "",
    "text": "def celsius_to_fahr(temp):\n    return 9 / 5 * temp + 32 \n\n\ncelsius_to_fahr(40)\n\n104.0\n\n\n\ncelsius_to_fahr(0)\n\n32.0\n\n\n\ndef how_long(a_string):\n    print(len(a_string))\n\n\nhow_long('abcd')\n\n4\n\n\n\ndef how_long(a_string):\n    len(a_string)\n\n\nhow_long('abcde')\n\n\ndef kelvins_to_celsius(temp_kelvins):\n    return temp_kelvins - 273.15\n\n\nkelvins_to_celsius(temp_kelvins=0)\n\n-273.15\n\n\n\nprint(\"Absolute zero in Celsius is:\", kelvins_to_celsius(0))\n\nAbsolute zero in Celsius is: -273.15\n\n\n\ndef kelvins_to_fahr(temp_kelvins):\n    temp_celsius = kelvins_to_celsius(temp_kelvins)\n    temp_fahr = celsius_to_fahr(temp_celsius)\n    return temp_fahr\n\n\nkelvins_to_fahr(0)\n\n-459.66999999999996\n\n\n\ndef kelvins_to_celsius(temp_kelvins):\n    \"\"\"Convers temperature in Kelvins to degrees celsius.\"\"\"\n    return temp_kelvins - 273.15\n\n\nkelvins_to_celsius?\n\n\nSignature: kelvins_to_celsius(temp_kelvins)\nDocstring: Convers temperature in Kelvins to degrees celsius.\nFile:      /tmp/ipykernel_1023841/522041369.py\nType:      function\n\n\n\n\nkelvins_to_celsius??\n\n\nSignature: kelvins_to_celsius(temp_kelvins)\nSource:   \ndef kelvins_to_celsius(temp_kelvins):\n    \"\"\"Convers temperature in Kelvins to degrees celsius.\"\"\"\n    return temp_kelvins - 273.15\nFile:      /tmp/ipykernel_1023841/522041369.py\nType:      function\n\n\n\n\ndef kelvins_to_celsius(temp_kelvins):\n    \"\"\"Convers temperature in Kelvins to degrees celsius.\n    \n    Parameters\n    ----------\n    temp_kelvins: <numerical>\n        Temperature in Kelvins\n        \n    Returns\n    -------\n    <float>\n       Converted temperature\n    \n    \"\"\"\n    return temp_kelvins - 273.15\n\n\nkelvins_to_celsius?\n\n\nSignature: kelvins_to_celsius(temp_kelvins)\nDocstring:\nConvers temperature in Kelvins to degrees celsius.\nParameters\n----------\ntemp_kelvins: <numerical>\n    Temperature in Kelvins\n    \nReturns\n-------\n<float>\n   Converted temperature\nFile:      /tmp/ipykernel_1023841/1189373821.py\nType:      function"
  },
  {
    "objectID": "lectures/week-02/2023-08-30-functions-scripts.html#using-modules-and-scripts",
    "href": "lectures/week-02/2023-08-30-functions-scripts.html#using-modules-and-scripts",
    "title": "Geog385F23",
    "section": "Using modules and scripts",
    "text": "Using modules and scripts\n\n%ls\n\n2023-08-23.ipynb                      2023-08-30-functions-scripts.ipynb\n2023-08-28-python-introduction.ipynb  temp_converter.py\n\n\n\n%pwd\n\n'/home/jupyter-serge/sessions'\n\n\n\nfrom temp_converter import celsius_to_fahr\n\n\ncelsius_to_fahr(100)\n\nFrom our cool function\n\n\n212.0\n\n\n\nimport math"
  },
  {
    "objectID": "lectures/week-02/2023-08-28-python-introduction.html",
    "href": "lectures/week-02/2023-08-28-python-introduction.html",
    "title": "Geog385F23",
    "section": "",
    "text": "high level language\nlow learning curve\nopen source\nwidespread use\nfun\n\n\n\n\n\n2 + 3\n\n5\n\n\n\n5 * 7\n\n35\n\n\n\n2**4\n\n16\n\n\n\n7 / 4\n\n1.75\n\n\n\nx = 8/3\n\n\nx\n\n2.6666666666666665\n\n\n\nimport math\n\n\nmath.pi\n\n3.141592653589793\n\n\n\nmath.sqrt(4)\n\n2.0\n\n\n\ntemp_celsius = 10.0\n\n\ntemp_celsius\n\n10.0\n\n\n\nprint(\"Temperature in Fahrenheit: \", 9/5 * temp_celsius + 32)\n\nTemperature in Fahrenheit:  50.0\n\n\n\nprint(\"Temperature in Fahrenheit: \", (9/5 * temp_celsius) + 32)\n\nTemperature in Fahrenheit:  50.0\n\n\n\ntemp_celsius\n\n10.0\n\n\n\ntemp_celsius = 40.0\n\n\nprint(\"Temperature in Fahrenheit: \", (9/5 * temp_celsius) + 32)\n\nTemperature in Fahrenheit:  104.0\n\n\n\nprint(\"Temperature in Fahrenheit: \", (9/5 * temp_celsius) + 32)\n\nTemperature in Fahrenheit:  104.0\n\n\n\n\n\n\nint\nfloat\nstr\nbool\n\n\nweatherForecast = \"Hot\"\n\n\ntype(weatherForecast)\n\nstr\n\n\n\nx = 10.1\ntype(x)\n\nfloat\n\n\n\ny = 7\ntype(y)\n\nint\n\n\n\ndir(weatherForecast)\n\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getnewargs__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rmod__',\n '__rmul__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'capitalize',\n 'casefold',\n 'center',\n 'count',\n 'encode',\n 'endswith',\n 'expandtabs',\n 'find',\n 'format',\n 'format_map',\n 'index',\n 'isalnum',\n 'isalpha',\n 'isascii',\n 'isdecimal',\n 'isdigit',\n 'isidentifier',\n 'islower',\n 'isnumeric',\n 'isprintable',\n 'isspace',\n 'istitle',\n 'isupper',\n 'join',\n 'ljust',\n 'lower',\n 'lstrip',\n 'maketrans',\n 'partition',\n 'removeprefix',\n 'removesuffix',\n 'replace',\n 'rfind',\n 'rindex',\n 'rjust',\n 'rpartition',\n 'rsplit',\n 'rstrip',\n 'split',\n 'splitlines',\n 'startswith',\n 'strip',\n 'swapcase',\n 'title',\n 'translate',\n 'upper',\n 'zfill']\n\n\n\nweatherForecast.upper()\n\n'HOT'\n\n\n\nweatherForecast.startswith('f')\n\nFalse\n\n\n\ntitle = \"This is the title of my book\"\n\n\ntitle\n\n'This is the title of my book'\n\n\n\ntitle.upper()\n\n'THIS IS THE TITLE OF MY BOOK'\n\n\n\ntitle.title()\n\n'This Is The Title Of My Book'\n\n\n\ntitle.split()\n\n['This', 'is', 'the', 'title', 'of', 'my', 'book']\n\n\n\ndir(title)\n\n['__add__',\n '__class__',\n '__contains__',\n '__delattr__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__getnewargs__',\n '__gt__',\n '__hash__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mod__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__rmod__',\n '__rmul__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'capitalize',\n 'casefold',\n 'center',\n 'count',\n 'encode',\n 'endswith',\n 'expandtabs',\n 'find',\n 'format',\n 'format_map',\n 'index',\n 'isalnum',\n 'isalpha',\n 'isascii',\n 'isdecimal',\n 'isdigit',\n 'isidentifier',\n 'islower',\n 'isnumeric',\n 'isprintable',\n 'isspace',\n 'istitle',\n 'isupper',\n 'join',\n 'ljust',\n 'lower',\n 'lstrip',\n 'maketrans',\n 'partition',\n 'removeprefix',\n 'removesuffix',\n 'replace',\n 'rfind',\n 'rindex',\n 'rjust',\n 'rpartition',\n 'rsplit',\n 'rstrip',\n 'split',\n 'splitlines',\n 'startswith',\n 'strip',\n 'swapcase',\n 'title',\n 'translate',\n 'upper',\n 'zfill']\n\n\n\ntitle\n\n'This is the title of my book'\n\n\n\ntitle.center(40)\n\n'      This is the title of my book      '\n\n\n\nwords = title.split()\n\n\nwords\n\n['This', 'is', 'the', 'title', 'of', 'my', 'book']\n\n\n\ntype(words)\n\nlist\n\n\n\ndir(words)\n\n['__add__',\n '__class__',\n '__class_getitem__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\n\nwords\n\n['This', 'is', 'the', 'title', 'of', 'my', 'book']\n\n\n\nlen(words)\n\n7\n\n\n\nlen(title)\n\n28\n\n\n\nwords[0]\n\n'This'\n\n\n\nwords[1]\n\n'is'\n\n\n\nwords[7]\n\nIndexError: list index out of range\n\n\n\nwords[6]\n\n'book'\n\n\n\ntitle\n\n'This is the title of my book'\n\n\n\ntitle[0]\n\n'T'\n\n\n\nlen(title)\n\n28\n\n\n\ntitle[-1]\n\n'k'\n\n\n\ntitle[-2]\n\n'o'\n\n\n\ntitle[0:-4]\n\n'This is the title of my '\n\n\n\ntitle[5:10]\n\n'is th'\n\n\n\ntitle[10]\n\n'e'\n\n\n\nwords\n\n['This', 'is', 'the', 'title', 'of', 'my', 'book']\n\n\n\nwords[1:-2]\n\n['is', 'the', 'title', 'of']\n\n\n\ntype(words)\n\nlist\n\n\n\ntype(words[0])\n\nstr\n\n\n\nfor word in words:\n    print(word)\n\nThis\nis\nthe\ntitle\nof\nmy\nbook\n\n\n\nfor i, word in enumerate(words):\n    print(i, word)\n\n0 This\n1 is\n2 the\n3 title\n4 of\n5 my\n6 book\n\n\n\nfor i, word in enumerate(words):\n    print(i, word, type(word))\n\n0 This <class 'str'>\n1 is <class 'str'>\n2 the <class 'str'>\n3 title <class 'str'>\n4 of <class 'str'>\n5 my <class 'str'>\n6 book <class 'str'>\n\n\n\nlen(words)\n\n7\n\n\n\nif len(words) > 7:\n    print('no its not longer than 7')\n\n\nif len(words) == 7:\n    print('it is of length 7')\n\nit is of length 7\n\n\n\nif len(words) > 7:\n    print('no its not longer than 7')\nelse:\n    print('It must be 7 or less in length')\n\nIt must be 7 or less in length\n\n\n\nif len(words) > 7:\n    print('no its not longer than 7')\nelif len(words)==7:\n    print('its 7')\nelse:\n    print('It is less than 7 in length')\n\nits 7"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html",
    "href": "lectures/week-03/2023-09-06.html",
    "title": "Geog385F23",
    "section": "",
    "text": "import pandas as pd"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html#unique-values",
    "href": "lectures/week-03/2023-09-06.html#unique-values",
    "title": "Geog385F23",
    "section": "Unique Values",
    "text": "Unique Values\n\ndata['TEMP'].unique()\n\narray([65.5, 65.8, 68.4, 57.5, 51.4, 52.2, 56.9, 54.2, 49.4, 49.5, 54. ,\n       55.4, 58.3, 59.7, 63.4, 57.8, 60.4, 57.3, 56.3, 59.3, 62.6, 61.7,\n       60.9, 61.1, 65.7, 69.6, 60.7, 65.4])\n\n\n\nprint(\n    \"There were\",\n    data[\"TEMP\"].nunique(),\n    \"days with unique mean temperatures in June 2016.\",\n)\n\nThere were 28 days with unique mean temperatures in June 2016.\n\n\n\ndata.TEMP.mean()\n\n59.730000000000004\n\n\n\ndata.mean()\n\nYEARMODA    20160615.50\nTEMP              59.73\nMAX               67.94\nMIN               51.75\ndtype: float64\n\n\n\ndata.describe()\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n    \n  \n  \n    \n      count\n      3.000000e+01\n      30.000000\n      30.000000\n      30.000000\n    \n    \n      mean\n      2.016062e+07\n      59.730000\n      67.940000\n      51.750000\n    \n    \n      std\n      8.803408e+00\n      5.475472\n      6.651761\n      5.634484\n    \n    \n      min\n      2.016060e+07\n      49.400000\n      54.100000\n      41.700000\n    \n    \n      25%\n      2.016061e+07\n      56.450000\n      63.150000\n      47.300000\n    \n    \n      50%\n      2.016062e+07\n      60.050000\n      69.000000\n      54.050000\n    \n    \n      75%\n      2.016062e+07\n      64.900000\n      72.375000\n      55.750000\n    \n    \n      max\n      2.016063e+07\n      69.600000\n      80.800000\n      60.300000"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html#constructing-pandas-objects",
    "href": "lectures/week-03/2023-09-06.html#constructing-pandas-objects",
    "title": "Geog385F23",
    "section": "Constructing Pandas objects",
    "text": "Constructing Pandas objects\n\nnumber_series = pd.Series([4, 5, 6, 7.0])\nprint(number_series)\n\n0    4.0\n1    5.0\n2    6.0\n3    7.0\ndtype: float64\n\n\n\nnumber_series = pd.Series([4, 5, 6, 7.0], index=[\"a\", \"b\", \"c\", \"d\"])\nprint(number_series)\n\na    4.0\nb    5.0\nc    6.0\nd    7.0\ndtype: float64\n\n\n\nstations = [\"Hanko\", \"Heinola\", \"Kaisaniemi\", \"Malmi\"]\nlatitudes = [59.77, 61.2, 60.18, 60.25]\nlongitudes = [22.95, 26.05, 24.94, 25.05]\n\n\nnew_data = pd.DataFrame(data={\"station\": stations, \"lat\": latitudes, \"lon\": longitudes})\nnew_data\n\n\n\n\n\n  \n    \n      \n      station\n      lat\n      lon\n    \n  \n  \n    \n      0\n      Hanko\n      59.77\n      22.95\n    \n    \n      1\n      Heinola\n      61.20\n      26.05\n    \n    \n      2\n      Kaisaniemi\n      60.18\n      24.94\n    \n    \n      3\n      Malmi\n      60.25\n      25.05\n    \n  \n\n\n\n\n\ndictionaries = [\n    {\"station\": \"Hanko\", \"lat\": 59.77, \"lon\": 22.95},\n    {\"station\": \"Heinola\", \"lat\": 61.2, \"lon\": 26.05},\n    {\"station\": \"Kaisaniemi\", \"lat\": 60.18, \"lon\": 24.94},\n    {\"station\": \"Malmi\", \"lat\": 60.25, \"lon\": 25.05},\n]\n\n# Pass the list into the DataFrame constructor\nnew_data_2 = pd.DataFrame(dictionaries)\nnew_data_2\n\n\n\n\n\n  \n    \n      \n      station\n      lat\n      lon\n    \n  \n  \n    \n      0\n      Hanko\n      59.77\n      22.95\n    \n    \n      1\n      Heinola\n      61.20\n      26.05\n    \n    \n      2\n      Kaisaniemi\n      60.18\n      24.94\n    \n    \n      3\n      Malmi\n      60.25\n      25.05\n    \n  \n\n\n\n\n\ndf = pd.DataFrame()\nprint(df)\n\nEmpty DataFrame\nColumns: []\nIndex: []\n\n\n\ndf[\"lon\"] = longitudes\ndf[\"lat\"] = latitudes\ndf\n\n\n\n\n\n  \n    \n      \n      lon\n      lat\n    \n  \n  \n    \n      0\n      22.95\n      59.77\n    \n    \n      1\n      26.05\n      61.20\n    \n    \n      2\n      24.94\n      60.18\n    \n    \n      3\n      25.05\n      60.25"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html#common-tabular-operations",
    "href": "lectures/week-03/2023-09-06.html#common-tabular-operations",
    "title": "Geog385F23",
    "section": "Common tabular operations",
    "text": "Common tabular operations\n\ndata.head()\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n    \n  \n  \n    \n      0\n      20160601\n      65.5\n      73.6\n      54.7\n    \n    \n      1\n      20160602\n      65.8\n      80.8\n      55.0\n    \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n    \n    \n      3\n      20160604\n      57.5\n      70.9\n      47.3\n    \n    \n      4\n      20160605\n      51.4\n      58.3\n      43.2\n    \n  \n\n\n\n\n\ndata['DIFF'] = 0.0\ndata.head()\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n    \n  \n  \n    \n      0\n      20160601\n      65.5\n      73.6\n      54.7\n      0.0\n    \n    \n      1\n      20160602\n      65.8\n      80.8\n      55.0\n      0.0\n    \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      0.0\n    \n    \n      3\n      20160604\n      57.5\n      70.9\n      47.3\n      0.0\n    \n    \n      4\n      20160605\n      51.4\n      58.3\n      43.2\n      0.0\n    \n  \n\n\n\n\n\ndata['DIFF'].dtypes\n\ndtype('float64')\n\n\n\ndata['DIFF'] = data['MAX'] - data['MIN']\ndata.head()\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n    \n  \n  \n    \n      0\n      20160601\n      65.5\n      73.6\n      54.7\n      18.9\n    \n    \n      1\n      20160602\n      65.8\n      80.8\n      55.0\n      25.8\n    \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      22.3\n    \n    \n      3\n      20160604\n      57.5\n      70.9\n      47.3\n      23.6\n    \n    \n      4\n      20160605\n      51.4\n      58.3\n      43.2\n      15.1\n    \n  \n\n\n\n\n\ndata[\"TEMP_CELSIUS\"] = (data[\"TEMP\"] - 32) / (9 / 5)\ndata.head()\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      0\n      20160601\n      65.5\n      73.6\n      54.7\n      18.9\n      18.611111\n    \n    \n      1\n      20160602\n      65.8\n      80.8\n      55.0\n      25.8\n      18.777778\n    \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      22.3\n      20.222222\n    \n    \n      3\n      20160604\n      57.5\n      70.9\n      47.3\n      23.6\n      14.166667\n    \n    \n      4\n      20160605\n      51.4\n      58.3\n      43.2\n      15.1\n      10.777778"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html#selecting-and-updating-data",
    "href": "lectures/week-03/2023-09-06.html#selecting-and-updating-data",
    "title": "Geog385F23",
    "section": "Selecting and updating data",
    "text": "Selecting and updating data\n\nselection = data[0:5]\nselection\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      0\n      20160601\n      65.5\n      73.6\n      54.7\n      18.9\n      18.611111\n    \n    \n      1\n      20160602\n      65.8\n      80.8\n      55.0\n      25.8\n      18.777778\n    \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      22.3\n      20.222222\n    \n    \n      3\n      20160604\n      57.5\n      70.9\n      47.3\n      23.6\n      14.166667\n    \n    \n      4\n      20160605\n      51.4\n      58.3\n      43.2\n      15.1\n      10.777778\n    \n  \n\n\n\n\n\n# Select temp column values on rows 0-5\nselection = data.loc[0:5, \"TEMP\"]\nselection\n\n0    65.5\n1    65.8\n2    68.4\n3    57.5\n4    51.4\n5    52.2\nName: TEMP, dtype: float64\n\n\n\nSelecting a single row\n\nrow = data.loc[4]\nrow\n\nYEARMODA        2.016060e+07\nTEMP            5.140000e+01\nMAX             5.830000e+01\nMIN             4.320000e+01\nDIFF            1.510000e+01\nTEMP_CELSIUS    1.077778e+01\nName: 4, dtype: float64\n\n\n\nrow[\"TEMP\"]\n\n51.4\n\n\n\n\nselection = data.loc[0:5, [\"TEMP\", \"TEMP_CELSIUS\"]]\nselection\n\n\n\n\n\n  \n    \n      \n      TEMP\n      TEMP_CELSIUS\n    \n  \n  \n    \n      0\n      65.5\n      18.611111\n    \n    \n      1\n      65.8\n      18.777778\n    \n    \n      2\n      68.4\n      20.222222\n    \n    \n      3\n      57.5\n      14.166667\n    \n    \n      4\n      51.4\n      10.777778\n    \n    \n      5\n      52.2\n      11.222222\n    \n  \n\n\n\n\n\nselection.at[0, \"TEMP\"]\n\n65.5\n\n\n\nselection.loc[0, \"TEMP\"]\n\n65.5\n\n\n\n\nSelection by position\n\n# Check the first rows\nprint(data.head())\nprint()\nprint(\"Value at position (0,0) is\", data.iloc[0, 0])\n\n   YEARMODA  TEMP   MAX   MIN  DIFF  TEMP_CELSIUS\n0  20160601  65.5  73.6  54.7  18.9     18.611111\n1  20160602  65.8  80.8  55.0  25.8     18.777778\n2  20160603  68.4  77.9  55.6  22.3     20.222222\n3  20160604  57.5  70.9  47.3  23.6     14.166667\n4  20160605  51.4  58.3  43.2  15.1     10.777778\n\nValue at position (0,0) is 20160601\n\n\n\ndata.iloc[-1, -1]\n\n18.722222222222225\n\n\n\ndata.tail()\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      25\n      20160626\n      69.6\n      77.7\n      60.3\n      17.4\n      20.888889\n    \n    \n      26\n      20160627\n      60.7\n      70.0\n      57.6\n      12.4\n      15.944444\n    \n    \n      27\n      20160628\n      65.4\n      73.0\n      55.8\n      17.2\n      18.555556\n    \n    \n      28\n      20160629\n      65.8\n      73.2\n      59.7\n      13.5\n      18.777778\n    \n    \n      29\n      20160630\n      65.7\n      72.7\n      59.2\n      13.5\n      18.722222\n    \n  \n\n\n\n\n\ndata.iloc[-1, -2]\n\n13.5"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html#selections-using-listed-criteria",
    "href": "lectures/week-03/2023-09-06.html#selections-using-listed-criteria",
    "title": "Geog385F23",
    "section": "Selections using listed criteria",
    "text": "Selections using listed criteria\n\n# List of values that will be used as basis for selecting the rows\nselection_criteria = [20160601, 20160608, 20160609]\n\n# Do the selection based on criteria applied to YEARMODA column\ndata.loc[data[\"YEARMODA\"].isin(selection_criteria)]\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      0\n      20160601\n      65.5\n      73.6\n      54.7\n      18.9\n      18.611111\n    \n    \n      7\n      20160608\n      54.2\n      60.4\n      47.5\n      12.9\n      12.333333\n    \n    \n      8\n      20160609\n      49.4\n      54.1\n      45.7\n      8.4\n      9.666667"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html#conditional-selection",
    "href": "lectures/week-03/2023-09-06.html#conditional-selection",
    "title": "Geog385F23",
    "section": "Conditional selection",
    "text": "Conditional selection\n\ndata.TEMP_CELSIUS > 15\n\n0      True\n1      True\n2      True\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13     True\n14     True\n15    False\n16     True\n17    False\n18    False\n19     True\n20     True\n21     True\n22     True\n23     True\n24     True\n25     True\n26     True\n27     True\n28     True\n29     True\nName: TEMP_CELSIUS, dtype: bool\n\n\n\nwarm_temps = data[data.TEMP_CELSIUS > 15]\nwarm_temps\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      0\n      20160601\n      65.5\n      73.6\n      54.7\n      18.9\n      18.611111\n    \n    \n      1\n      20160602\n      65.8\n      80.8\n      55.0\n      25.8\n      18.777778\n    \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      22.3\n      20.222222\n    \n    \n      13\n      20160614\n      59.7\n      67.8\n      47.8\n      20.0\n      15.388889\n    \n    \n      14\n      20160615\n      63.4\n      70.3\n      49.3\n      21.0\n      17.444444\n    \n    \n      16\n      20160617\n      60.4\n      70.7\n      55.9\n      14.8\n      15.777778\n    \n    \n      19\n      20160620\n      59.3\n      69.1\n      52.2\n      16.9\n      15.166667\n    \n    \n      20\n      20160621\n      62.6\n      71.4\n      50.4\n      21.0\n      17.000000\n    \n    \n      21\n      20160622\n      61.7\n      70.2\n      55.4\n      14.8\n      16.500000\n    \n    \n      22\n      20160623\n      60.9\n      67.1\n      54.9\n      12.2\n      16.055556\n    \n    \n      23\n      20160624\n      61.1\n      68.9\n      56.7\n      12.2\n      16.166667\n    \n    \n      24\n      20160625\n      65.7\n      75.4\n      57.9\n      17.5\n      18.722222\n    \n    \n      25\n      20160626\n      69.6\n      77.7\n      60.3\n      17.4\n      20.888889\n    \n    \n      26\n      20160627\n      60.7\n      70.0\n      57.6\n      12.4\n      15.944444\n    \n    \n      27\n      20160628\n      65.4\n      73.0\n      55.8\n      17.2\n      18.555556\n    \n    \n      28\n      20160629\n      65.8\n      73.2\n      59.7\n      13.5\n      18.777778\n    \n    \n      29\n      20160630\n      65.7\n      72.7\n      59.2\n      13.5\n      18.722222\n    \n  \n\n\n\n\n\nwarm_temps = data[(data[\"TEMP_CELSIUS\"] > 15) & (data[\"YEARMODA\"] >= 20160615)]\nwarm_temps\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      14\n      20160615\n      63.4\n      70.3\n      49.3\n      21.0\n      17.444444\n    \n    \n      16\n      20160617\n      60.4\n      70.7\n      55.9\n      14.8\n      15.777778\n    \n    \n      19\n      20160620\n      59.3\n      69.1\n      52.2\n      16.9\n      15.166667\n    \n    \n      20\n      20160621\n      62.6\n      71.4\n      50.4\n      21.0\n      17.000000\n    \n    \n      21\n      20160622\n      61.7\n      70.2\n      55.4\n      14.8\n      16.500000\n    \n    \n      22\n      20160623\n      60.9\n      67.1\n      54.9\n      12.2\n      16.055556\n    \n    \n      23\n      20160624\n      61.1\n      68.9\n      56.7\n      12.2\n      16.166667\n    \n    \n      24\n      20160625\n      65.7\n      75.4\n      57.9\n      17.5\n      18.722222\n    \n    \n      25\n      20160626\n      69.6\n      77.7\n      60.3\n      17.4\n      20.888889\n    \n    \n      26\n      20160627\n      60.7\n      70.0\n      57.6\n      12.4\n      15.944444\n    \n    \n      27\n      20160628\n      65.4\n      73.0\n      55.8\n      17.2\n      18.555556\n    \n    \n      28\n      20160629\n      65.8\n      73.2\n      59.7\n      13.5\n      18.777778\n    \n    \n      29\n      20160630\n      65.7\n      72.7\n      59.2\n      13.5\n      18.722222\n    \n  \n\n\n\n\nSelectoins### Reset index\n\nwarm_temps = warm_temps.reset_index(drop=True)\nwarm_temps\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      0\n      20160615\n      63.4\n      70.3\n      49.3\n      21.0\n      17.444444\n    \n    \n      1\n      20160617\n      60.4\n      70.7\n      55.9\n      14.8\n      15.777778\n    \n    \n      2\n      20160620\n      59.3\n      69.1\n      52.2\n      16.9\n      15.166667\n    \n    \n      3\n      20160621\n      62.6\n      71.4\n      50.4\n      21.0\n      17.000000\n    \n    \n      4\n      20160622\n      61.7\n      70.2\n      55.4\n      14.8\n      16.500000\n    \n    \n      5\n      20160623\n      60.9\n      67.1\n      54.9\n      12.2\n      16.055556\n    \n    \n      6\n      20160624\n      61.1\n      68.9\n      56.7\n      12.2\n      16.166667\n    \n    \n      7\n      20160625\n      65.7\n      75.4\n      57.9\n      17.5\n      18.722222\n    \n    \n      8\n      20160626\n      69.6\n      77.7\n      60.3\n      17.4\n      20.888889\n    \n    \n      9\n      20160627\n      60.7\n      70.0\n      57.6\n      12.4\n      15.944444\n    \n    \n      10\n      20160628\n      65.4\n      73.0\n      55.8\n      17.2\n      18.555556\n    \n    \n      11\n      20160629\n      65.8\n      73.2\n      59.7\n      13.5\n      18.777778\n    \n    \n      12\n      20160630\n      65.7\n      72.7\n      59.2\n      13.5\n      18.722222\n    \n  \n\n\n\n\n\nwarm_temps[\"MIN\"].hasnans\n\nFalse"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html#sorting-data",
    "href": "lectures/week-03/2023-09-06.html#sorting-data",
    "title": "Geog385F23",
    "section": "Sorting Data",
    "text": "Sorting Data\n\ndata.sort_values(by=\"TEMP\").head()\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      8\n      20160609\n      49.4\n      54.1\n      45.7\n      8.4\n      9.666667\n    \n    \n      9\n      20160610\n      49.5\n      55.9\n      43.0\n      12.9\n      9.722222\n    \n    \n      4\n      20160605\n      51.4\n      58.3\n      43.2\n      15.1\n      10.777778\n    \n    \n      5\n      20160606\n      52.2\n      59.7\n      42.8\n      16.9\n      11.222222\n    \n    \n      10\n      20160611\n      54.0\n      62.1\n      41.7\n      20.4\n      12.222222\n    \n  \n\n\n\n\n\ndata.sort_values(by=\"TEMP\", ascending=False).head()\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n    \n  \n  \n    \n      25\n      20160626\n      69.6\n      77.7\n      60.3\n      17.4\n      20.888889\n    \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      22.3\n      20.222222\n    \n    \n      1\n      20160602\n      65.8\n      80.8\n      55.0\n      25.8\n      18.777778\n    \n    \n      28\n      20160629\n      65.8\n      73.2\n      59.7\n      13.5\n      18.777778\n    \n    \n      29\n      20160630\n      65.7\n      72.7\n      59.2\n      13.5\n      18.722222\n    \n  \n\n\n\n\n\n# Create a list of weekdays that matches with our data\n# The data covers 4 weeks + 2 days (i.e. altogether 30 days)\nweek_days = [\"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\", \"Mon\", \"Tue\"]\nday_list = week_days * 4 + week_days[:2]\n\n# Add the weekdays to our DataFrame\ndata[\"WEEKDAY\"] = day_list\ndata.head(10)\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n      WEEKDAY\n    \n  \n  \n    \n      0\n      20160601\n      65.5\n      73.6\n      54.7\n      18.9\n      18.611111\n      Wed\n    \n    \n      1\n      20160602\n      65.8\n      80.8\n      55.0\n      25.8\n      18.777778\n      Thu\n    \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      22.3\n      20.222222\n      Fri\n    \n    \n      3\n      20160604\n      57.5\n      70.9\n      47.3\n      23.6\n      14.166667\n      Sat\n    \n    \n      4\n      20160605\n      51.4\n      58.3\n      43.2\n      15.1\n      10.777778\n      Sun\n    \n    \n      5\n      20160606\n      52.2\n      59.7\n      42.8\n      16.9\n      11.222222\n      Mon\n    \n    \n      6\n      20160607\n      56.9\n      65.1\n      45.9\n      19.2\n      13.833333\n      Tue\n    \n    \n      7\n      20160608\n      54.2\n      60.4\n      47.5\n      12.9\n      12.333333\n      Wed\n    \n    \n      8\n      20160609\n      49.4\n      54.1\n      45.7\n      8.4\n      9.666667\n      Thu\n    \n    \n      9\n      20160610\n      49.5\n      55.9\n      43.0\n      12.9\n      9.722222\n      Fri\n    \n  \n\n\n\n\n\ndata.sort_values(by=[\"WEEKDAY\", \"TEMP_CELSIUS\"], ascending=[True, False]).head(10)\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n      WEEKDAY\n    \n  \n  \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      22.3\n      20.222222\n      Fri\n    \n    \n      23\n      20160624\n      61.1\n      68.9\n      56.7\n      12.2\n      16.166667\n      Fri\n    \n    \n      16\n      20160617\n      60.4\n      70.7\n      55.9\n      14.8\n      15.777778\n      Fri\n    \n    \n      9\n      20160610\n      49.5\n      55.9\n      43.0\n      12.9\n      9.722222\n      Fri\n    \n    \n      26\n      20160627\n      60.7\n      70.0\n      57.6\n      12.4\n      15.944444\n      Mon\n    \n    \n      19\n      20160620\n      59.3\n      69.1\n      52.2\n      16.9\n      15.166667\n      Mon\n    \n    \n      12\n      20160613\n      58.3\n      68.2\n      47.3\n      20.9\n      14.611111\n      Mon\n    \n    \n      5\n      20160606\n      52.2\n      59.7\n      42.8\n      16.9\n      11.222222\n      Mon\n    \n    \n      24\n      20160625\n      65.7\n      75.4\n      57.9\n      17.5\n      18.722222\n      Sat\n    \n    \n      3\n      20160604\n      57.5\n      70.9\n      47.3\n      23.6\n      14.166667\n      Sat\n    \n  \n\n\n\n\n\ndata.sort_values(by=[\"WEEKDAY\"], ascending=[True]).head(10)\n\n\n\n\n\n  \n    \n      \n      YEARMODA\n      TEMP\n      MAX\n      MIN\n      DIFF\n      TEMP_CELSIUS\n      WEEKDAY\n    \n  \n  \n    \n      2\n      20160603\n      68.4\n      77.9\n      55.6\n      22.3\n      20.222222\n      Fri\n    \n    \n      16\n      20160617\n      60.4\n      70.7\n      55.9\n      14.8\n      15.777778\n      Fri\n    \n    \n      23\n      20160624\n      61.1\n      68.9\n      56.7\n      12.2\n      16.166667\n      Fri\n    \n    \n      9\n      20160610\n      49.5\n      55.9\n      43.0\n      12.9\n      9.722222\n      Fri\n    \n    \n      12\n      20160613\n      58.3\n      68.2\n      47.3\n      20.9\n      14.611111\n      Mon\n    \n    \n      19\n      20160620\n      59.3\n      69.1\n      52.2\n      16.9\n      15.166667\n      Mon\n    \n    \n      5\n      20160606\n      52.2\n      59.7\n      42.8\n      16.9\n      11.222222\n      Mon\n    \n    \n      26\n      20160627\n      60.7\n      70.0\n      57.6\n      12.4\n      15.944444\n      Mon\n    \n    \n      17\n      20160618\n      57.3\n      62.8\n      54.0\n      8.8\n      14.055556\n      Sat\n    \n    \n      10\n      20160611\n      54.0\n      62.1\n      41.7\n      20.4\n      12.222222\n      Sat"
  },
  {
    "objectID": "lectures/week-03/2023-09-06.html#visualization",
    "href": "lectures/week-03/2023-09-06.html#visualization",
    "title": "Geog385F23",
    "section": "Visualization",
    "text": "Visualization\n\nimport seaborn as sns\nsns.set()\n\n\nimport pandas\n\n\ndf = pandas.read_csv(\"data/shared/covid/covid_combined.csv\",\n                     index_col='date', parse_dates=True)\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      state\n      fips\n      cases\n      deaths\n      dtc100\n      population\n      deaths100k\n    \n    \n      date\n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-01-21\n      Washington\n      53\n      1\n      0\n      0.0\n      7614893\n      0.0\n    \n    \n      2020-01-22\n      Washington\n      53\n      1\n      0\n      0.0\n      7614893\n      0.0\n    \n    \n      2020-01-23\n      Washington\n      53\n      1\n      0\n      0.0\n      7614893\n      0.0\n    \n    \n      2020-01-24\n      Washington\n      53\n      1\n      0\n      0.0\n      7614893\n      0.0\n    \n    \n      2020-01-25\n      Washington\n      53\n      1\n      0\n      0.0\n      7614893\n      0.0\n    \n  \n\n\n\n\n\ndf.tail()\n\n\n\n\n\n  \n    \n      \n      state\n      fips\n      cases\n      deaths\n      dtc100\n      population\n      deaths100k\n    \n    \n      date\n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      2020-07-29\n      Northern Mariana Islands\n      69\n      40\n      2\n      5.000000\n      55194\n      3.623582\n    \n    \n      2020-07-30\n      Northern Mariana Islands\n      69\n      42\n      2\n      4.761905\n      55194\n      3.623582\n    \n    \n      2020-07-31\n      Northern Mariana Islands\n      69\n      42\n      2\n      4.761905\n      55194\n      3.623582\n    \n    \n      2020-08-01\n      Northern Mariana Islands\n      69\n      44\n      2\n      4.545455\n      55194\n      3.623582\n    \n    \n      2020-08-02\n      Northern Mariana Islands\n      69\n      45\n      2\n      4.444444\n      55194\n      3.623582\n    \n  \n\n\n\n\n\ndf.shape\n\n(8287, 7)\n\n\n\ndf.index\n\nDatetimeIndex(['2020-01-21', '2020-01-22', '2020-01-23', '2020-01-24',\n               '2020-01-25', '2020-01-26', '2020-01-27', '2020-01-28',\n               '2020-01-29', '2020-01-30',\n               ...\n               '2020-07-24', '2020-07-25', '2020-07-26', '2020-07-27',\n               '2020-07-28', '2020-07-29', '2020-07-30', '2020-07-31',\n               '2020-08-01', '2020-08-02'],\n              dtype='datetime64[ns]', name='date', length=8287, freq=None)\n\n\n\nlast_df = df.loc['2020-08-02']\n\n\nlast_df.shape\n\n(54, 7)\n\n\n\nlast_df.reset_index(inplace=True)\nlast_df\n\n\n\n\n\n  \n    \n      \n      date\n      state\n      fips\n      cases\n      deaths\n      dtc100\n      population\n      deaths100k\n    \n  \n  \n    \n      0\n      2020-08-02\n      Washington\n      53\n      60161\n      1680\n      2.792507\n      7614893\n      22.062030\n    \n    \n      1\n      2020-08-02\n      Illinois\n      17\n      183662\n      7718\n      4.202285\n      12671821\n      60.906795\n    \n    \n      2\n      2020-08-02\n      California\n      6\n      515937\n      9399\n      1.821734\n      39512223\n      23.787576\n    \n    \n      3\n      2020-08-02\n      Arizona\n      4\n      178473\n      3769\n      2.111804\n      7278717\n      51.781104\n    \n    \n      4\n      2020-08-02\n      Massachusetts\n      25\n      118458\n      8638\n      7.292036\n      6949503\n      124.296658\n    \n    \n      5\n      2020-08-02\n      Wisconsin\n      55\n      58990\n      956\n      1.620614\n      5822434\n      16.419250\n    \n    \n      6\n      2020-08-02\n      Texas\n      48\n      452826\n      7515\n      1.659578\n      28995881\n      25.917474\n    \n    \n      7\n      2020-08-02\n      Nebraska\n      31\n      26702\n      338\n      1.265823\n      1934408\n      17.473046\n    \n    \n      8\n      2020-08-02\n      Utah\n      49\n      41175\n      313\n      0.760170\n      3205958\n      9.763072\n    \n    \n      9\n      2020-08-02\n      Oregon\n      41\n      19097\n      331\n      1.733257\n      4217737\n      7.847810\n    \n    \n      10\n      2020-08-02\n      Florida\n      12\n      487124\n      7083\n      1.454045\n      21477737\n      32.978335\n    \n    \n      11\n      2020-08-02\n      New York\n      36\n      421008\n      32401\n      7.696053\n      19453561\n      166.555624\n    \n    \n      12\n      2020-08-02\n      Rhode Island\n      44\n      19022\n      1007\n      5.293870\n      1059361\n      95.057303\n    \n    \n      13\n      2020-08-02\n      Georgia\n      13\n      177556\n      3758\n      2.116515\n      10617423\n      35.394653\n    \n    \n      14\n      2020-08-02\n      New Hampshire\n      33\n      6634\n      417\n      6.285800\n      1359711\n      30.668282\n    \n    \n      15\n      2020-08-02\n      North Carolina\n      37\n      125339\n      1996\n      1.592481\n      10488084\n      19.031121\n    \n    \n      16\n      2020-08-02\n      New Jersey\n      34\n      184225\n      15836\n      8.596010\n      8882190\n      178.289363\n    \n    \n      17\n      2020-08-02\n      Colorado\n      8\n      47799\n      1846\n      3.862005\n      5758736\n      32.055646\n    \n    \n      18\n      2020-08-02\n      Maryland\n      24\n      90835\n      3515\n      3.869654\n      6045680\n      58.140689\n    \n    \n      19\n      2020-08-02\n      Nevada\n      32\n      50270\n      833\n      1.657052\n      3080156\n      27.044085\n    \n    \n      20\n      2020-08-02\n      Tennessee\n      47\n      106804\n      1062\n      0.994345\n      6833174\n      15.541826\n    \n    \n      21\n      2020-08-02\n      Hawaii\n      15\n      2219\n      25\n      1.126634\n      1415872\n      1.765696\n    \n    \n      22\n      2020-08-02\n      Indiana\n      18\n      69531\n      2975\n      4.278667\n      6732219\n      44.190482\n    \n    \n      23\n      2020-08-02\n      Kentucky\n      21\n      31966\n      759\n      2.374398\n      4467673\n      16.988710\n    \n    \n      24\n      2020-08-02\n      Minnesota\n      27\n      55987\n      1654\n      2.954257\n      5639632\n      29.328155\n    \n    \n      25\n      2020-08-02\n      Oklahoma\n      40\n      38201\n      550\n      1.439753\n      3956971\n      13.899521\n    \n    \n      26\n      2020-08-02\n      Pennsylvania\n      42\n      118038\n      7274\n      6.162422\n      12801989\n      56.819296\n    \n    \n      27\n      2020-08-02\n      South Carolina\n      45\n      91788\n      1777\n      1.935983\n      5148714\n      34.513473\n    \n    \n      28\n      2020-08-02\n      District of Columbia\n      11\n      12274\n      586\n      4.774320\n      705749\n      83.032353\n    \n    \n      29\n      2020-08-02\n      Kansas\n      20\n      28341\n      361\n      1.273773\n      2913314\n      12.391387\n    \n    \n      30\n      2020-08-02\n      Missouri\n      29\n      52550\n      1311\n      2.494767\n      6137428\n      21.360739\n    \n    \n      31\n      2020-08-02\n      Vermont\n      50\n      1426\n      57\n      3.997195\n      623989\n      9.134776\n    \n    \n      32\n      2020-08-02\n      Virginia\n      51\n      91782\n      2218\n      2.416596\n      8535519\n      25.985532\n    \n    \n      33\n      2020-08-02\n      Connecticut\n      9\n      49810\n      4432\n      8.897812\n      3565287\n      124.309768\n    \n    \n      34\n      2020-08-02\n      Iowa\n      19\n      45723\n      878\n      1.920259\n      3155070\n      27.828226\n    \n    \n      35\n      2020-08-02\n      Louisiana\n      22\n      119861\n      4007\n      3.343039\n      4648794\n      86.194398\n    \n    \n      36\n      2020-08-02\n      Ohio\n      39\n      93031\n      3529\n      3.793359\n      11689100\n      30.190519\n    \n    \n      37\n      2020-08-02\n      Michigan\n      26\n      91857\n      6460\n      7.032670\n      9986857\n      64.685016\n    \n    \n      38\n      2020-08-02\n      South Dakota\n      46\n      8955\n      135\n      1.507538\n      884659\n      15.260117\n    \n    \n      39\n      2020-08-02\n      Arkansas\n      5\n      43810\n      464\n      1.059119\n      3017825\n      15.375312\n    \n    \n      40\n      2020-08-02\n      Delaware\n      10\n      14949\n      585\n      3.913305\n      973764\n      60.076158\n    \n    \n      41\n      2020-08-02\n      Mississippi\n      28\n      60553\n      1703\n      2.812412\n      2976149\n      57.221597\n    \n    \n      42\n      2020-08-02\n      New Mexico\n      35\n      21016\n      654\n      3.111915\n      2096829\n      31.189954\n    \n    \n      43\n      2020-08-02\n      North Dakota\n      38\n      6664\n      109\n      1.635654\n      762062\n      14.303298\n    \n    \n      44\n      2020-08-02\n      Wyoming\n      56\n      2808\n      26\n      0.925926\n      578759\n      4.492371\n    \n    \n      45\n      2020-08-02\n      Alaska\n      2\n      3982\n      22\n      0.552486\n      731545\n      3.007334\n    \n    \n      46\n      2020-08-02\n      Maine\n      23\n      3958\n      123\n      3.107630\n      1344212\n      9.150342\n    \n    \n      47\n      2020-08-02\n      Alabama\n      1\n      91444\n      1627\n      1.779231\n      4903185\n      33.182513\n    \n    \n      48\n      2020-08-02\n      Idaho\n      16\n      21465\n      197\n      0.917773\n      1787065\n      11.023662\n    \n    \n      49\n      2020-08-02\n      Montana\n      30\n      4193\n      61\n      1.454806\n      1068778\n      5.707453\n    \n    \n      50\n      2020-08-02\n      Puerto Rico\n      72\n      18411\n      230\n      1.249253\n      3193694\n      7.201692\n    \n    \n      51\n      2020-08-02\n      Guam\n      66\n      1328\n      6\n      0.451807\n      165718\n      3.620609\n    \n    \n      52\n      2020-08-02\n      West Virginia\n      54\n      6854\n      117\n      1.707032\n      1792147\n      6.528482\n    \n    \n      53\n      2020-08-02\n      Northern Mariana Islands\n      69\n      45\n      2\n      4.444444\n      55194\n      3.623582\n    \n  \n\n\n\n\n\n_ = sns.displot(last_df.deaths100k)\n\n\n\n\n\n_ = sns.displot(last_df.deaths100k, rug=True)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]